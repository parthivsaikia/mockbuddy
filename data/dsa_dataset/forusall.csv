problem id,question title,question text,topic tagged text,difficulty level,hints,similar questions id,similar questions text
272,272. Closest Binary Search Tree Value II,,"Two Pointers,Stack,Tree,Depth-First Search,Binary Search Tree,Heap (Priority Queue),Binary Tree",Hard,"Consider implement these two helper functions:
getPredecessor(N), which returns the next smaller node to N.
getSuccessor(N), which returns the next larger node to N. Try to assume that each node has a parent pointer, it makes the problem much easier. Without parent pointer we just need to keep track of the path from the root to the current node using a stack. You would need two stacks to track the path in finding predecessor and successor node separately.","94,270","Binary Tree Inorder Traversal,Closest Binary Search Tree Value"
828,828. Count Unique Characters of All Substrings of a Given String,"Let's define a function countUniqueChars(s) that returns the number of unique characters in s.

For example, calling countUniqueChars(s) if s = ""LEETCODE"" then ""L"", ""T"", ""C"", ""O"", ""D"" are the unique characters since they appear only once in s, therefore countUniqueChars(s) = 5.

Given a string s, return the sum of countUniqueChars(t) where t is a substring of s. The test cases are generated such that the answer fits in a 32-bit integer.
Notice that some substrings can be repeated so in this case you have to count the repeated ones too.
 
Example 1:
Input: s = ""ABC""
Output: 10
Explanation: All possible substrings are: ""A"",""B"",""C"",""AB"",""BC"" and ""ABC"".
Every substring is composed with only unique letters.
Sum of lengths of all substring is 1 + 1 + 1 + 2 + 2 + 3 = 10

Example 2:
Input: s = ""ABA""
Output: 8
Explanation: The same as example 1, except countUniqueChars(""ABA"") = 1.

Example 3:
Input: s = ""LEETCODE""
Output: 92

 
Constraints:

1 <= s.length <= 105
s consists of uppercase English letters only.

","Array,Math,Bit Manipulation,Brainteaser,Game Theory",Hard,,,
